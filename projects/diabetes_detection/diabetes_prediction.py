# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e5StNT4NPgqXpic9fMeE2hy6ra__im8O

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and analysis"""

#loading the dataset to the pandas dataframe
dataset=pd.read_csv('projects\diabetes_detection\diabetes.csv')

dataset.head()

dataset.shape

dataset['Outcome'].value_counts()

"""0--> Non-diabetic people

1-->diabetic people
"""

dataset.describe()

dataset.groupby('Outcome').mean()

data=dataset.drop(columns='Outcome',axis=1)
label=dataset['Outcome']

"""Data Standardization"""

scaler=StandardScaler()

scaler.fit(data)

standardised_data=scaler.transform(data)

print(standardised_data,label)

data_train,data_test,label_train,label_test=train_test_split(standardised_data,label,test_size=0.2,stratify=label,random_state=2)

print(data_train.shape,data_test.shape)

"""Training the model"""

classifer=svm.SVC(kernel='linear')

#training the support vector machine classifer
classifer.fit(data_train,label_train)

"""Model evaluation"""

#accuracy score on the training data
data_train_prediction=classifer.predict(data_train)
data_train_accuracy=accuracy_score(data_train_prediction,label_train)
print(data_train_accuracy)

#accuracy score on the testing data
data_test_predection=classifer.predict(data_test)
data_test_accuracy=accuracy_score(data_test_predection,label_test)

print(data_test_accuracy)

#implementing predection system
input_data=(6,103,72,32,190,37.7,0.324,55)
numpy_array_input_data=np.asarray(input_data)
reshaped_numpy=numpy_array_input_data.reshape(1,-1)
std_data=scaler.transform(reshaped_numpy)
predection=classifer.predict(std_data)
if(predection[0]==1):
  print('diabates is positive')
else:
  print('diabates is negative')

