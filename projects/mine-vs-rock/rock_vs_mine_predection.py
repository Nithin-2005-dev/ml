# -*- coding: utf-8 -*-
"""Rock_Vs_Mine_Predection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bNCJYhXhZXh8lTuZMvXoduFEKKCzaS2x

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing"""

#loading the dataset in a pandas dataframe
dataset=pd.read_csv('projects\mine-vs-rock\sonar_data.csv',header=None)

dataset.head()

dataset.shape

dataset.describe()

dataset.value_counts(60)

"""M--->Mine

R--->Rock
"""

dataset.groupby(60).mean()

#seprating data and labels
data=dataset.drop(columns=60,axis=0)
label=dataset[60]

print(data)
print(label)

"""Training and test data"""

data_train,data_test,label_train,label_test=train_test_split(data,label,test_size=0.1,stratify=label,random_state=1)

print(data.shape,data_train.shape,data_test.shape)

"""Model Training --->Logestic Regression"""

model=LogisticRegression()

#training the logistic regression model with training data
model.fit(data_train,label_train)

"""model evaluation"""

#accuracy on training data
data_train_predection=model.predict(data_train)
training_data_accuracy=accuracy_score(data_train_predection,label_train)

print(training_data_accuracy)

data_test_predection=model.predict(data_test)
test_data_accuracy=accuracy_score(data_test_predection,label_test)

print(test_data_accuracy)

"""Making a predective system"""

#input taken from dataset and predection should be mine
input_data=[0.0187,0.0346,0.0168,0.0177,0.0393,0.1630,0.2028,0.1694,0.2328,0.2684,0.3108,0.2933,0.2275,0.0994,0.1801,0.2200,0.2732,0.2862,0.2034,0.1740,0.4130,0.6879,0.8120,0.8453,0.8919,0.9300,0.9987,1.0000,0.8104,0.6199,0.6041,0.5547,0.4160,0.1472,0.0849,0.0608,0.0969,0.1411,0.1676,0.1200,0.1201,0.1036,0.1977,0.1339,0.0902,0.1085,0.1521,0.1363,0.0858,0.0290,0.0203,0.0116,0.0098,0.0199,0.0033,0.0101,0.0065,0.0115,0.0193,0.0157]
#changing the input data to a numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the numpy array as we are predecting for one instance
input_array_reshaped=input_data_as_numpy_array.reshape(1,-1)
predection=model.predict(input_array_reshaped)

if(predection=='M'):
  print("It's Mine")
else:
  print("It's Rock")